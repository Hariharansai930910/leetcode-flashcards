{
  "categoryName": "Arrays and Strings",
  "problems": [
    {
      "id": 1,
      "title": "Contains Duplicate",
      "difficulty": "Easy",
      "description": "Given an integer array nums, return true if any value appears more than once in the array, otherwise return false.",
      "code": "def hasDuplicate(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False",
      "hints": [
        "Consider using a hash set to track elements you've seen",
        "Time complexity: O(n)",
        "Space complexity: O(n)"
      ],
      "mnemonic": "The 'Track What You've Seen' technique: Add each element to a set as you process it, and check if you've already seen it before adding."
    },
    {
      "id": 2,
      "title": "Valid Anagram",
      "difficulty": "Easy",
      "description": "Given two strings s and t, return true if the two strings are anagrams of each other, otherwise return false. An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.",
      "code": "def isAnagram(s, t):\n    if len(s) != len(t):\n        return False\n\n    count = [0] * 26\n    for i in range(len(s)):\n        count[ord(s[i]) - ord('a')] += 1\n        count[ord(t[i]) - ord('a')] -= 1\n\n    for val in count:\n        if val != 0:\n            return False\n    return True",
      "hints": [
        "If two strings are anagrams, they have the same characters with the same frequency",
        "Use a character frequency counter (array or hash map)",
        "Time complexity: O(n+m)",
        "Space complexity: O(1) - since we have at most 26 different characters"
      ],
      "mnemonic": "The 'Character Counting Balance' approach: Count up for one string, count down for the other - everything should balance to zero for anagrams."
    },
    {
      "id": 3,
      "title": "Two Sum",
      "difficulty": "Easy",
      "description": "Given an array of integers nums and an integer target, return the indices i and j such that nums[i] + nums[j] == target and i != j. You may assume that every input has exactly one pair of indices i and j that satisfy the condition. Return the answer with the smaller index first.",
      "code": "def twoSum(nums, target):\n    indices = {}  # val -> index\n\n    for i, n in enumerate(nums):\n        indices[n] = i\n\n    for i, n in enumerate(nums):\n        diff = target - n\n        if diff in indices and indices[diff] != i:\n            return [i, indices[diff]]",
      "hints": [
        "For each number, check if its complement (target - current number) exists in the map",
        "Use a hash map to store values you've seen",
        "Time complexity: O(n)",
        "Space complexity: O(n)"
      ],
      "mnemonic": "The 'Complement Finder' method: For each number, ask 'What number do I need to add to reach the target?' Then check if you've seen that number before."
    },
    {
      "id": 4,
      "title": "Group Anagrams",
      "difficulty": "Medium",
      "description": "Given an array of strings strs, group all anagrams together into sublists. You may return the output in any order. An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.",
      "code": "from collections import defaultdict\n\ndef groupAnagrams(strs):\n    res = defaultdict(list)\n    for s in strs:\n        count = [0] * 26\n        for c in s:\n            count[ord(c) - ord('a')] += 1\n        res[tuple(count)].append(s)\n    return list(res.values())",
      "hints": [
        "Anagrams have the same character count",
        "Use a character count as a key in a hash map",
        "Time complexity: O(m*n) where m is the number of strings and n is the average string length",
        "Space complexity: O(m)"
      ],
      "mnemonic": "The 'Pattern Grouping' method: Create a signature (character count) for each string, and group strings with the same signature together."
    },
    {
      "id": 5,
      "title": "Top K Frequent Elements",
      "difficulty": "Medium",
      "description": "Given an integer array nums and an integer k, return the k most frequent elements within the array. The test cases are generated such that the answer is always unique. You may return the output in any order.",
      "code": "def topKFrequent(nums, k):\n    count = {}\n    freq = [[] for i in range(len(nums) + 1)]\n\n    for num in nums:\n        count[num] = 1 + count.get(num, 0)\n    for num, cnt in count.items():\n        freq[cnt].append(num)\n    \n    res = []\n    for i in range(len(freq) - 1, 0, -1):\n        for num in freq[i]:\n            res.append(num)\n            if len(res) == k:\n                return res",
      "hints": [
        "Count frequencies of each element",
        "Use bucket sort for optimal time complexity",
        "Time complexity: O(n)",
        "Space complexity: O(n)"
      ],
      "mnemonic": "The 'Frequency Bucket' approach: Create buckets for each possible frequency, then collect elements from highest frequency buckets first."
    },
    {
      "id": 6,
      "title": "Encode and Decode Strings",
      "difficulty": "Medium",
      "description": "Design an algorithm to encode a list of strings to a single string. The encoded string is then decoded back to the original list of strings.",
      "code": "class Solution:\n    def encode(self, strs):\n        res = \"\"\n        for s in strs:\n            res += str(len(s)) + \"#\" + s\n        return res\n\n    def decode(self, s):\n        res = []\n        i = 0\n        \n        while i < len(s):\n            j = i\n            while s[j] != '#':\n                j += 1\n            length = int(s[i:j])\n            i = j + 1\n            j = i + length\n            res.append(s[i:j])\n            i = j\n            \n        return res",
      "hints": [
        "Use a delimiter with length information",
        "Format: [length]#[string]",
        "Time complexity: O(n) for both encode and decode",
        "Space complexity: O(n)"
      ],
      "mnemonic": "The 'Length Prefix' pattern: Store each string's length, followed by a delimiter (#), followed by the string itself."
    },
    {
      "id": 7,
      "title": "Product of Array Except Self",
      "difficulty": "Medium",
      "description": "Given an integer array nums, return an array output where output[i] is the product of all the elements of nums except nums[i]. Each product is guaranteed to fit in a 32-bit integer.",
      "code": "def productExceptSelf(nums):\n    res = [1] * (len(nums))\n\n    prefix = 1\n    for i in range(len(nums)):\n        res[i] = prefix\n        prefix *= nums[i]\n    postfix = 1\n    for i in range(len(nums) - 1, -1, -1):\n        res[i] *= postfix\n        postfix *= nums[i]\n    return res",
      "hints": [
        "Calculate prefix products and suffix products",
        "Use a two-pass approach without division",
        "Time complexity: O(n)",
        "Space complexity: O(1) excluding the output array"
      ],
      "mnemonic": "The 'Prefix-Suffix Product' technique: For each position, multiply the product of all numbers before it with the product of all numbers after it."
    },
    {
      "id": 8,
      "title": "Valid Sudoku",
      "difficulty": "Medium",
      "description": "You are given a 9 x 9 Sudoku board. A Sudoku board is valid if each row, column, and 3 x 3 sub-box contains the digits 1-9 without duplicates. Return true if the Sudoku board is valid, otherwise return false. Note: A board does not need to be full or be solvable to be valid.",
      "code": "def isValidSudoku(board):\n    for row in range(9):\n        seen = set()\n        for i in range(9):\n            if board[row][i] == \".\": \n                continue\n            if board[row][i] in seen:\n                return False\n            seen.add(board[row][i])\n    \n    for col in range(9):\n        seen = set()\n        for i in range(9):\n            if board[i][col] == \".\":\n                continue\n            if board[i][col] in seen:\n                return False\n            seen.add(board[i][col])\n        \n    for square in range(9):\n        seen = set()\n        for i in range(3):\n            for j in range(3):\n                row = (square//3) * 3 + i\n                col = (square % 3) * 3 + j\n                if board[row][col] == \".\":\n                    continue\n                if board[row][col] in seen:\n                    return False\n                seen.add(board[row][col])\n    return True",
      "hints": [
        "Check each row, column, and 3x3 grid separately",
        "Use a set to track seen digits",
        "Time complexity: O(n²)",
        "Space complexity: O(n²)"
      ],
      "mnemonic": "The 'Three-Way Validation' approach: Check rows, columns, and sub-boxes separately, using sets to ensure no duplicates in each group."
    },
    {
      "id": 9,
      "title": "Longest Consecutive Sequence",
      "difficulty": "Medium",
      "description": "Given an array of integers nums, return the length of the longest consecutive sequence of elements that can be formed. A consecutive sequence is a sequence of elements in which each element is exactly 1 greater than the previous element. The elements do not have to be consecutive in the original array.",
      "code": "def longestConsecutive(nums):\n    numSet = set(nums)\n    longest = 0\n\n    for num in numSet:\n        if (num - 1) not in numSet:\n            length = 1\n            while (num + length) in numSet:\n                length += 1\n            longest = max(length, longest)\n    return longest",
      "hints": [
        "Use a set for O(1) lookups",
        "Only start counting sequences from their first element",
        "Time complexity: O(n)",
        "Space complexity: O(n)"
      ],
      "mnemonic": "The 'Sequence Start Detection' technique: Only start checking sequences from numbers that could be the beginning of a sequence (no number-1 exists)."
    }
  ]
}
