{
  "categoryName": "Two Pointers",
  "problems": [
    {
      "id": 1,
      "title": "Valid Palindrome",
      "difficulty": "Easy",
      "description": "Check if a given string is a palindrome, considering only alphanumeric characters and ignoring cases.",
      "code": "def isPalindrome(s):\n    left, right = 0, len(s) - 1\n    \n    while left < right:\n        while left < right and not s[left].isalnum():\n            left += 1\n        while left < right and not s[right].isalnum():\n            right -= 1\n            \n        if s[left].lower() != s[right].lower():\n            return False\n        \n        left += 1\n        right -= 1\n    \n    return True",
      "hints": [
        "Use two pointers moving from opposite ends",
        "Skip non-alphanumeric characters",
        "Compare characters in a case-insensitive manner",
        "Time complexity: O(N)",
        "Space complexity: O(1)"
      ],
      "mnemonic": "The 'Mirror Check' approach: Two pointers move inward, skipping non-alphanumeric characters, ensuring the string reads the same from both directions."
    },
    {
      "id": 2,
      "title": "Two Sum II - Input Array Is Sorted",
      "difficulty": "Easy",
      "description": "Find two numbers in a sorted array that add up to a target.",
      "code": "def twoSum(numbers, target):\n    left, right = 0, len(numbers) - 1\n    \n    while left < right:\n        curr_sum = numbers[left] + numbers[right]\n        \n        if curr_sum == target:\n            return [left + 1, right + 1]  # 1-based index\n        \n        if curr_sum < target:\n            left += 1\n        else:\n            right -= 1\n    \n    return []",
      "hints": [
        "Use two pointers at opposite ends",
        "Move left pointer if sum is too small",
        "Move right pointer if sum is too large",
        "Time complexity: O(N)",
        "Space complexity: O(1)"
      ],
      "mnemonic": "The 'Converging Search' technique: Two pointers narrow down the search space by moving inward based on whether the current sum is too small or too large."
    },
    {
      "id": 3,
      "title": "3Sum",
      "difficulty": "Medium",
      "description": "Find unique triplets in an array that sum to zero.",
      "code": "def threeSum(nums):\n    nums.sort()\n    res = []\n    \n    for i in range(len(nums) - 2):\n        if i > 0 and nums[i] == nums[i - 1]:  # Skip duplicates\n            continue\n        \n        left, right = i + 1, len(nums) - 1\n        \n        while left < right:\n            total = nums[i] + nums[left] + nums[right]\n            \n            if total == 0:\n                res.append([nums[i], nums[left], nums[right]])\n                \n                while left < right and nums[left] == nums[left + 1]:  # Skip duplicates\n                    left += 1\n                while left < right and nums[right] == nums[right - 1]:  # Skip duplicates\n                    right -= 1\n                \n                left += 1\n                right -= 1\n                \n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n                \n    return res",
      "hints": [
        "Sort the array first",
        "Fix one element and use two pointers for the other two",
        "Skip duplicates to avoid duplicate triplets",
        "Time complexity: O(N²)",
        "Space complexity: O(1) excluding output"
      ],
      "mnemonic": "The 'Anchor and Search' strategy: Fix one number as an anchor, then use two pointers to find pairs that complete the triplet."
    },
    {
      "id": 4,
      "title": "Container With Most Water",
      "difficulty": "Medium",
      "description": "Find two vertical lines that form a container with the maximum water storage.",
      "code": "def maxArea(height):\n    left, right = 0, len(height) - 1\n    max_water = 0\n    \n    while left < right:\n        max_water = max(max_water, (right - left) * min(height[left], height[right]))\n        \n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    \n    return max_water",
      "hints": [
        "Use two pointers at opposite ends",
        "Calculate area as width × minimum height",
        "Move the pointer with smaller height inward",
        "Time complexity: O(N)",
        "Space complexity: O(1)"
      ],
      "mnemonic": "The 'Move the Shorter Wall' principle: Always move the pointer with the shorter height inward, as keeping it would limit the container's volume."
    },
    {
      "id": 5,
      "title": "Trapping Rain Water",
      "difficulty": "Hard",
      "description": "Calculate the amount of rainwater that can be trapped between the bars.",
      "code": "def trap(height):\n    if not height:\n        return 0\n    \n    left, right = 0, len(height) - 1\n    left_max, right_max = 0, 0\n    trapped_water = 0\n    \n    while left < right:\n        if height[left] < height[right]:\n            if height[left] >= left_max:\n                left_max = height[left]\n            else:\n                trapped_water += left_max - height[left]\n            left += 1\n        else:\n            if height[right] >= right_max:\n                right_max = height[right]\n            else:\n                trapped_water += right_max - height[right]\n            right -= 1\n            \n    return trapped_water",
      "hints": [
        "Use two pointers with max height tracking",
        "Track left_max and right_max as you move inward",
        "Water trapped at a position depends on the smaller of left_max and right_max",
        "Time complexity: O(N)",
        "Space complexity: O(1)"
      ],
      "mnemonic": "The 'Water Level Boundary' technique: Water can be trapped at a position if there are higher boundaries on both sides - track these boundaries as you move inward."
    }
  ]
}
